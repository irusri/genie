<?php 
require_once('Datatables2.php');
require_once('../../../../../../sites/default/settings.php');  
include('../../../../../../crud/getgenelist.php');
$default_gene_basket_array=getdefaultgenelist();

$datatables = new Datatables();

global $db_url;

//MySQL connection from main settings file. database is popgeniegenepages
$private_url = parse_url($db_url['genepages']);
$popgenie_genepages_config = array(
'username' => $private_url['user'],
'password' => $private_url['pass'],
'database' => str_replace('/', '', $private_url['path']), 
'hostname' => $private_url['host']);

// MYSQL configuration
$datatables->connect($popgenie_genepages_config);
 
$datatables//,basic.Peptide_Name
//->select('ID,"check_box_value",ID as ids,chromosome,source,confidence,trinity_id,pfam_ids,go_ids,pfam_desc,go_desc')

->select('basic.Gene_Name as ID,"check_box_value",basic.Gene_Name as ids,basic.Transcript_Name,basic.Chromosome_Name,syno2.field2 as synonyms, basic.Description,  genelist_go.genelist_go_id,basic.Gene_Start as y, genelist_pfam.genelist_pfam_id,genelist_panther.genelist_panther_id,genelist_kog.genelist_kog_id,genelist_ko.genelist_ko_id
,genelist_smart.genelist_smart_id,genelist_atg.genelist_atg_id,basic.Gene_End' )
->from('basic') 
->join('syno2', 'syno2.field1=basic.Transcript_Name', 'inner')
->join('genelist_go', 'genelist_go.genelist_go_gene_id=basic.Transcript_Name', 'left')
->join('genelist_pfam', 'genelist_pfam.genelist_pfam_gene_id=basic.Transcript_Name', 'left')
->join('genelist_panther', 'genelist_panther.genelist_panther_gene_id=basic.Transcript_Name', 'left') 
->join('genelist_kog', 'genelist_kog.genelist_kog_gene_id=basic.Transcript_Name', 'left') 
->join('genelist_ko', 'genelist_ko.genelist_ko_gene_id=basic.Transcript_Name', 'left')  
->join('genelist_smart', 'genelist_smart.genelist_smart_gene_id=basic.Transcript_Name', 'left') 
->join('genelist_atg', 'genelist_atg.genelist_atg_gene_id=basic.Transcript_Name', 'left') 
  

->edit_column('ids', '<a target="_parent" href="gene?id=$1" target="_parent">$1</a>', 'ID')
->edit_column('basic.Transcript_Name', '<a target="_parent" href="transcript?id=$1#basic">$1</a>', 'basic.Transcript_Name')
->edit_column('y', '$1-$2', 'y,basic.Gene_End')
->unset_column('basic.Gene_End') ; 


if(isset($_POST['id']) && $_POST['id'] != ''){
	$vowels = array(",", ";", "\t", "\n", "\r", "s+", " ",",,");
	$post_input=preg_replace("/\s+/", ",", trim(htmlentities($_POST['id']))); 
	$onlyconsonants = strtolower(str_replace($vowels, ",", $post_input));
	$pattern = '/^[a-zA-Z0-9]+[.]+[a-zA-Z0-9]+[.]+[0-9]?[0-9]$/';
	
	
	
	if(checkprefix($onlyconsonants,"potri")==true){
	$geneids_array = explode(",", $onlyconsonants);
	$geneids_array_str=implode('","',$geneids_array);
		if(preg_match($pattern,$geneids_array[0])== true){
			$datatables->where('Transcript_Name in ',$geneids_array_str);
		}else{
			$datatables->where('Gene_Name in ',$geneids_array_str);
		}
	}
	
	if(checkprefix($onlyconsonants,"poptr")==true   || checkprefix($onlyconsonants,"fgenesh")==true  || checkprefix($onlyconsonants,"estExt")==true   || checkprefix($onlyconsonants,"eugene")==true ){
	$onlyconsonants3 = str_replace($vowels, ",",  $post_input);	
	$geneids_array = explode(",", $onlyconsonants3);
	$geneids_array_str=implode('%" OR syno2.field2 LIKE "%',$geneids_array);
	$datatables->where('syno2.field2 like','%'.$geneids_array_str.'%');
	}
	
	if(checkprefix($onlyconsonants,"chr")==true   || checkprefix($onlyconsonants,"scaffold")==true  ){
	$geneids_array = explode(",", $onlyconsonants);
	$geneids_array_str=implode('","',$geneids_array);
	$datatables->where('Chromosome_Name in ',$geneids_array_str);
	}

	if(checkprefix($onlyconsonants,"kog")==true   ){
	$onlyconsonants3 = str_replace($vowels, ",", $post_input);	
	$geneids_array = explode(",", $onlyconsonants3);
	$geneids_array_str=implode('%" OR genelist_kog.genelist_kog_id LIKE "%',$geneids_array);
	$datatables->where('genelist_kog.genelist_kog_id like','%'.$geneids_array_str.'%');		
	}	
	
	if(checkprefix($onlyconsonants,"pf")==true   ){
	$onlyconsonants3 = str_replace($vowels, ",", $post_input);	
	$geneids_array = explode(",", $onlyconsonants3);
	$geneids_array_str=implode('%" OR genelist_pfam.genelist_pfam_id LIKE "%',$geneids_array);
	$datatables->where('genelist_pfam.genelist_pfam_id like','%'.$geneids_array_str.'%');		
	}	
	
		if(checkprefix($onlyconsonants,"go:")==true   ){
	$onlyconsonants3 = str_replace($vowels, ",", $post_input);	
	$geneids_array = explode(",", $onlyconsonants3);
	$geneids_array_str=implode('%" OR genelist_go.genelist_go_id LIKE "%',$geneids_array);
	$datatables->where('genelist_go.genelist_go_id like','%'.$geneids_array_str.'%');		
	}	

		if(checkprefix($onlyconsonants,"pthr")==true   ){
	$onlyconsonants3 = str_replace($vowels, ",", $post_input);
	$geneids_array = explode(",", $onlyconsonants3);
	$geneids_array_str=implode('%" OR genelist_panther.genelist_panther_id LIKE "%',$geneids_array);
	$datatables->where('genelist_panther.genelist_panther_id like','%'.$geneids_array_str.'%');		
	}	
	
	if(checkprefix($onlyconsonants,"description:")==true   || checkprefix($onlyconsonants,"define:")==true|| checkprefix($onlyconsonants,"desc:")==true   ){
	$vowels_tmp = array("Description:", "Define:","description:","define:","desc:","Desc:");
	$onlyconsonants_tmp = strtolower(str_replace($vowels_tmp, "", $post_input));
	$datatables->where('Description like ','%'.$onlyconsonants_tmp."%");
	}
	
	
	if(checkprefix($onlyconsonants,"at")==true && strlen($post_input)  >5 ){
		$flag=false;
	$geneids_array = explode(",", $onlyconsonants);
	$geneids_array_str=implode('","',$geneids_array);
	$datatables->where('genelist_atg.genelist_atg_id in ','%'.$geneids_array_str.'%');
	}
	
if($flag==true &&  checkprefix($post_input,"Shared")==false  ){
		$where = "Description LIKE '%".$post_input."%' OR syno2.field2 LIKE '%".$post_input."%' OR genelist_go.genelist_go_id LIKE 
'%".$post_input."%' OR genelist_atg.genelist_atg_id LIKE '%".$post_input."%' OR genelist_pfam.genelist_pfam_id LIKE '%".$post_input."%'";
		// OR genelist_kog.genelist_kog_id LIKE '%".$post_input."%' OR genelist_ko.genelist_ko_id LIKE '%".$post_input."%'";
		$datatables->where($where);	
		}
	
	
} 




ini_set('memory_limit', '-1');
ini_set('max_execution_time', 300);
if($_POST['add_genes']==true){
//echo ($datatables->generate);
updategenebasket($datatables->generate_genelist()); 

}

if($_POST['remove_genes']==true){
//$temparr=array($datatables->generate_genelist());
removegenebasket($datatables->generate_genelist());
//print_r($datatables->generate_genelist());
}

if($_POST['share_table']==true){
//print_r($datatables->generate_genelist());
//$randid=rand(100, 100000000000);
$randid = substr(number_format(time() * rand(), 0, '', ''), 0, 10000000);
sharetable($datatables->generate_genelist(),"shared table",$randid); 
echo  $randid;
}


#####################################
//Check prefix
#####################################
function checkprefix($source, $prefix) {
    if (str_startswith($source, $prefix)) {
       return true;
    } else {
       return false;
    }
}
function str_startswith($source, $prefix)
{
   return strncmp($source, $prefix, strlen($prefix)) == 0;
}
/////////////////////////////////////


#####################################
//Check suffix
#####################################
function checksuffix($source, $suffix) {
    if (str_endswith($source, $suffix)) {
       return true;
    } else {
       return false;
    }
}
function str_endswith($source, $suffix) {
   return (strpos(strrev($source), strrev($suffix)) === 0);
}
/////////////////////////////////////



?>
