var tblPrueba2;
var gaiSelected =  [];
var uniqueGenes = [];
var selectboolean=false;

//Very cool custom functions
function $_GET(q,s) { 
        s = s ? s : window.location.search; 
        var re = new RegExp('&'+q+'(?:=([^&]*))?(?=&|$)','i'); 
		return (s=s.replace('?','&').match(re)) ? (typeof s[1] == 'undefined' ? '' : decodeURIComponent(s[1])) : undefined; 
} 

$.fn.getColumnsShown = function(dTable){
    var vCols = [];
    $.each(dTable.fnSettings().aoColumns, function(c){
      if(dTable.fnSettings().aoColumns[c].bVisible === true && c !=1){
        vCols = vCols.concat(dTable.fnSettings().aoColumns[c].sTitle);
      }
    });
    return vCols;
}

function handleAjaxError( xhr, textStatus, error ) {
    if ( textStatus === 'timeout' ) {
        alert( 'The server took too long to send the data.' );
    }
    else {
        alert( 'An error occurred on the server. Please try again in a minute.' );
    }
    tblPrueba2.fnProcessingIndicator( false );
}

jQuery.fn.dataTableExt.oApi.fnProcessingIndicator = function ( oSettings, onoff ) {
    if ( typeof( onoff ) == 'undefined' ) {
        onoff = true;
    }
    this.oApi._fnProcessingDisplay( oSettings, onoff );
};


$(document).ready(function() {
(getCookie("mainsearchcookie")!=undefined)?$('#myInputTextField').val(getCookie("mainsearchcookie")):$('#myInputTextField').val("High");
  var columnDefinitions = [
   /* {"sTitle":"Engine","aTargets":[0],"mData":"engine","bVisible":true,"bSearchable":true,"bSortable":true},
    {"sTitle":"Browser","aTargets":[1],"mData":"browser","bVisible":true,"bSearchable":true,"bSortable":true},
    {"sTitle":"Platform","aTargets":[2],"mData":"platform","bVisible":true,"bSearchable":true,"bSortable":true},
    {"sTitle":"Version","aTargets":[3],"mData":"version","bVisible":true,"bSearchable":true,"bSortable":true}*/
   	// {"sTitle":"Grade","aTargets":[4],"mData":"grade","bVisible":true,"bSearchable":true,"bSortable":true},
	//{"sTitle":"Acciones","aTargets":[5],"mData":"acciones","bVisible":true,"bSearchable":true,"bSortable":true}//,"sClass":"botonera"
  ];
  
 
  //alert(table_str);
  
    /*
   * Main search support
   */	
  $('#myInputTextField').keyup(function(){
	    tblPrueba2.fnFilter( $(this).val(), $('#myInputTextField').val() );
	  // var i=0;
		//$("thead tr").each( function ( i ) {
			///
               // if(i>=2 )
               // this.innerHTML = fnCreateSelect( tblPrueba2.fnGetColumnData(i) );
				//
               // $('select', this).change( function () {
                  //  tblPrueba2.fnFilter( $(this).val(),i );
					//console.log(i);
                //} );
		//});
		//
		
		setCookie("mainsearchcookie",$('#myInputTextField').val(),7);
		})
    /*
   * Column search support
   */				
$('#tblPrueba2 thead input')
  .keyup( function () {
    /* Filter on the column (the index) of this element */
    tblPrueba2.fnFilter( $(this).val(), $('#_'+this.id+'_index').val() );
	//tblPrueba2.fnFilter( $(this).val(),4 );
  } )
  .focus( function () {
    if ( $(this).hasClass('search_init') ){
      $(this).removeClass('search_init');
      $(this).val('');}
  } )
  
  .blur( function (i) {
    if ( $(this).val() === '' ){
      $(this).addClass('search_init');
      $(this).val($('#_'+this.id+'_initVal').val());}
  } );
  
  
if(typeof  $_GET('table') !='undefined'){
	var hm_1 = $("body").wHumanMsg();
	var finalvarx="checkrandomid="+$_GET('table');
	$.ajax({
		type: "POST",
  		url: "sites/all/themes/admire_grunge/requests/beta_search_augusts2.php",
 		data:(finalvarx),
		success:function (data){
			//console.log(data); 
			if(data.trim()=='null'){
		hm_1.wHumanMsg('Sorry! It appears that you entered the wrong table id('+$_GET('table')+'). Please check with person who created this table.', {theme: 'red', opacity: 1,displayLength: 3000000});
			}else{
			hm_1.wHumanMsg('It appears that you found this gene table from a shared link created in '+data.trim()+'. If you want, you can bookmark this page: your results will be stored on the server at least for 30 days.', {theme: 'yellow', opacity: 1,displayLength: 3000000});
			}
		}
	});
	
	$("#myInputTextField").val('Shared table id:'+$_GET('table'));
	$("#myInputTextField").prop("disabled", true);
}
  
  
  tblPrueba2 = $('#tblPrueba2').dataTable( {
	  
     'sAjaxSource'    : 'sites/all/themes/admire_grunge/requests/beta_search_augusts2.php',
	  'fnServerData': function(sSource, aoData, fnCallback){
		
          aoData.push( { "name": "id", "value": $('#myInputTextField').val()} );
	       $.ajax
            ({
              'dataType': 'json',
              'type'    : 'POST',
              'url'     : sSource,
              'data'    : aoData,
              'success' : fnCallback,
			  "error": handleAjaxError
			  }); 
	    },		
		"sScrollXInner": "100%",
		//"bPaginate":       false,
		
		//"bJQueryUI": true,
	 //"bStateSave":true,
   //'aoColumnDefs': columnDefinitions,
    'bAutoWidth': false,
	//'aoColumns':[{ type: "checkbox", values: [ 'Gecko', 'Trident'] },{},{},{},{ type: "checkbox", values: [ 'A', 'C']  } ],
   // 'bFilter': true,
 //  "bAutoWidth": false,
 
   	"bProcessing": true,
	'bServerSide'    : true,
	"sPaginationType": "full_numbers",
    'bInfo': true,
    'bLengthChange': true,
    'bScrollCollapse': true,
    'bSort': true,
	"aLengthMenu": [[10, 25, 50, 100,500], [10, 25, 50, 100,500]],
    'iDisplayLength': 25,
    'oColVis': {
		'sSize':"100",
		'aiExclude': [0,1,2],
		'buttonText': "Select Annotation Types",
		'sAlign' : 'left',
		 "bRestore": true,
            "sRestore": "Restore default visibility"
    	},
	"aoColumns": [
			{ "bVisible": 0,"aTargets":0 }, // ID column 
			{"aTargets":1},
			 { "sWidth": "2px","aTargets":2 }, 
			{"aTargets":3},
			{"aTargets":4},
			{"aTargets":5},
			{"aTargets":6},
			{"bVisible":false,"sWidth":"70px","aTargets":7},
			{"bVisible":false,"sWidth":"70px","aTargets":8},
			{"bVisible":false,"sWidth":"60%","aTargets":9},
			{"bVisible":false,"sWidth":"60%","aTargets":10}
			//"sTitle": "<input class='checkboxSelectorall'  type='checkbox' id='selectAll'></input>"
		],
	"aoColumnDefs": [{
				"fnRender": function ( oObj ) {
				//console.log(oObj.aData[1]);
					if(oObj.aData[1]==true){
						return '<input class="checkboxSelector" checked id="rcheckbox" type="checkbox" > ';	
					}else{
					
						return '<input class="checkboxSelector"  id="rcheckbox" type="checkbox" > ';	
					}
					},
		"aTargets": [1],
		"bSortable": false  
				}, {
      "aTargets": [7],
       "mData": 7,
      "mRender": function ( data, type, full ) {
		  
		  var pfam_str="";
		  if(data!=null){
		  var tmppfamArray=data.split(";");
		  $.each( tmppfamArray, function( key, value ) {
			var endstr;(key%2 != 0)?(endstr="<br>"):((key==tmppfamArray.length-1)?endstr="":endstr=",")
			   pfam_str+=("<a target='_blank' href='http://pfam.sanger.ac.uk/family/"+value+"'>"+value+"</a>"+endstr);
			});
		  }else{
			pfam_str="";
		  }
        return pfam_str;
      }
    }, {
      "aTargets": [8],
       "mData": 8,
      "mRender": function ( data, type, full ) {
		  var go_str="";
		  if(data!=null){
		  var tmpgoArray=data.split(";");
		  $.each( tmpgoArray, function( key, value ) {
			  var endstr;(key%2 != 0)?(endstr="<br>"):((key==tmpgoArray.length-1)?endstr="":endstr=",")
			   go_str+=("<a target='_blank' href='http://amigo.geneontology.org/cgi-bin/amigo/term_details?term="+value+"'>"+value+"</a>"+endstr);
			});
		  }else{
			go_str="";
		  }
        return go_str;
      }
    }, {
      "aTargets": [9],
       "mData": 9,
      "mRender": function ( data, type, full ) {
		  var pfam_desc_str="";
		  if(data!=null){
		  var tmppfamdescArray=data.split(";");
		  $.each( tmppfamdescArray, function( key, value ) {
			  var endstr;(key==tmppfamdescArray.length-1)?(endstr=""):(endstr=",<br>");
			   pfam_desc_str+=("<a target='_blank' href='http://pfam.sanger.ac.uk/family/"+value.split(/-(.+)?/)[0]+"'>"+value.split(/-(.+)?/)[0]+"</a>-"+value.split(/-(.+)?/)[1]+endstr);
			});
		  }else{
			pfam_desc_str="";
		  }
        return pfam_desc_str;
      }
    },{
      "aTargets": [10],
       "mData": 10,
      "mRender": function ( data, type, full ) {
		  var go_desc_str="";
		  if(data!=null){
		  var tmpgodescArray=data.split(";");
		  $.each( tmpgodescArray, function( key, value ) {
			  var endstr;(key==tmpgodescArray.length-1)?(endstr=""):(endstr=",<br>");
			   go_desc_str+=("<a target='_blank' href='http://amigo.geneontology.org/cgi-bin/amigo/term_details?term="+value.split(/-(.+)?/)[0]+"'>"+value.split(/-(.+)?/)[0]+"</a>-"+value.split(/-(.+)?/)[1]+endstr);
			});
		  }else{
			go_desc_str="";
		  }
        return go_desc_str;
      }
    }
	
	],
	
	"fnRowCallback": function( nRow, aData, iDisplayIndex ) {
	// var $cell=$('td:eq(5)', nRow);
       //                     $cell.text(ellipsis($cell.text(),10));
		//					 var $cell=$('td:eq(6)', nRow);
       //                     $cell.text(ellipsis($cell.text(),10));
		//console.log($(nRow).find('.checkboxSelector').prop("checked"));
		
		//$('#rcheckbox'+aData[0]).prop('checked', true);
		
		
		
	/*	if ( aData[4] != "A" )
			{
				$('td:eq(4)', nRow).html( '<b>A</b>' );
			}*/
		
		
		
			if ( jQuery.inArray(aData[0], gaiSelected) != -1 ){
				//console.log($('#rcheckbox'+aData[0]).prop);
				////$(nRow).addClass('DTTT_selected');
				$(nRow).find('.checkboxSelector').prop("checked", true);
				//	if (nRow).hasClass('DTTT_selected')) {
					//$(nRow).find('#rcheckbox'+aData[0]).prop("checked", true);
					//}
			}else{
				$(nRow).find('.checkboxSelector').prop("checked", $(".checkboxSelectorall").prop('checked'));
				
				}
			return nRow;
		},
		
		
		
    'oTableTools': {
		"sRowSelect": "multi",
      	"sSwfPath": "sites/all/themes/admire_grunge/genelist/swf/copy_csv_xls_pdf.swf.1",
      	'aButtons': [
		/*{
          'sExtends': 'select_all',
          'sToolTip': 'Select All',
          'sButtonText': 'Select All'
        },
		
		{
          'sExtends': 'select_none',
          'sToolTip': 'Deselect All',  
          'sButtonText': 'Deselect All'
        },*/ {
          'sExtends': 'copy',
          'sToolTip': 'Copy table',
          'sButtonText': 'Copy table'
        },
		
		
		
        {
          'sExtends': 'downloadtest',
          'sToolTip': 'Export table as CSV',
          'sButtonText': 'Export table as CSV',
		   'sFileName': '*.csv',
		    "sUrl": "sites/all/themes/admire_grunge/requests/download.php",
		   "mColumns": "visible"
        },
        {
          'sExtends': 'downloadtest',
          'sToolTip': 'Export table a TSV',
          'sButtonText': 'Export table as TSV',
          'sFileName': '*.tsv',
		   "sUrl": "sites/all/themes/admire_grunge/requests/download.php",
		   "mColumns": "visible"
        },
		
		
		{
            "sExtends": "ajax",
			 'sButtonText': 'Save all to Gene List',
            "fnClick": function () {
				var searchs =  $('#myInputTextField').val();//this.s.dt.oPreviousSearch.sSearch;
              var columns = this.s.dt.aoPreSearchCols;
              var columnsearch = "";
			  var oParams = this.s.dt.oApi._fnAjaxParameters( this.s.dt );
			 var numberofgenesrecord=this.s.dt._iRecordsTotal;
			 
			   for ( i=0 ; i<columns.length ; i++ ) {
                columnsearch += "&filter_"+i+"="+encodeURIComponent(columns[i].sSearch);
              }
				 var finalvar= $.param(oParams)+"&iDisplayLength="+this.s.dt._iRecordsTotal+"&add_genes=true&id="+$('#myInputTextField').val();
			   $('body').css("cursor", "wait");
			$("#ToolTables_tblPrueba2_3").html("Saving genes..<img src='sites/all/themes/admire_grunge/genelist/swf/btnloader.GIF' />");
			$.ajax({
				
  					type: "POST",
  					url: "sites/all/themes/admire_grunge/requests/beta_search_augusts22.php",
 					data:(finalvar),
					success:function (){
						$("#tblPrueba2").stop();
							$("#tblPrueba2").effect( "transfer",{ to: "#numberofgenesSpan", className: "ui-effects-transfer-2" }, 600 );

						updategenebasket();
						  $('body').css("cursor", "auto");
						$("#ToolTables_tblPrueba2_3").html("Saved genes");
						$("#ToolTables_tblPrueba2_4").html("Remove all from Gene List");
						$('.checkboxSelector', tblPrueba2.fnGetNodes()).prop('checked', true);
						selectboolean=true;
						

					}
			});
          }
        } ,
		
		{
            "sExtends": "ajax",
			 'sButtonText': 'Remove all from Gene List',
			 "fnClick": function () {
			     
				var searchs =  $('#myInputTextField').val();//this.s.dt.oPreviousSearch.sSearch;
              var columns = this.s.dt.aoPreSearchCols;
              var columnsearch = "";
			  var oParams = this.s.dt.oApi._fnAjaxParameters( this.s.dt );
			 var numberofgenesrecord=this.s.dt._iRecordsTotal;
			 
			   for ( i=0 ; i<columns.length ; i++ ) {
                columnsearch += "&filter_"+i+"="+encodeURIComponent(columns[i].sSearch);
              }
			 
			 var finalvar= $.param(oParams)+"&iDisplayLength="+this.s.dt._iRecordsTotal+"&remove_genes=true&id="+$('#myInputTextField').val();;
			   $('body').css("cursor", "wait");
			$("#ToolTables_tblPrueba2_4").html("Removing genes..<img src='sites/all/themes/admire_grunge/genelist/swf/btnloader.GIF' />");
			$.ajax({
				
  					type: "POST",
  					url: "sites/all/themes/admire_grunge/requests/beta_search_augusts22.php",
 					data:(finalvar),
					success:function (){
						$("#numberofgenesSpan").stop();
					$("#numberofgenesSpan").effect( "transfer",{ to: "#deletebasket", className: "ui-effects-transfer-2" }, 500 );
						updategenebasket();
						 $('body').css("cursor", "auto");
						$("#ToolTables_tblPrueba2_4").html("Removed genes");
						$("#ToolTables_tblPrueba2_3").html("Save all to Gene List");
						$('.checkboxSelector', tblPrueba2.fnGetNodes()).prop('checked', false);
						selectboolean=false;
					}
					
			});
			
			
			 }
				
		},
		{
            "sExtends": "ajax",
			 'sButtonText': 'Empty Gene List',
			 "fnClick": function () {
				   $('body').css("cursor", "wait");
				 $("#ToolTables_tblPrueba2_5").html("Deleting Gene List..");
					$.ajax({
  					type: "POST",
  					url: "crud/updatedatabase.php",
 					data:{ empty_default_basket : "ss" },
					success:function (){
							$("#numberofgenesSpan").stop();
					$("#numberofgenesSpan").effect( "transfer",{ to: "#deletebasket", className: "ui-effects-transfer-2" }, 500 );
						updategenebasket();
						 $('body').css("cursor", "auto");
					$("#ToolTables_tblPrueba2_3").html("Save all to Gene List");
					$("#ToolTables_tblPrueba2_5").html("Empty Gene List");
					$("#ToolTables_tblPrueba2_4").html("Remove all from Gene List");
					$('.checkboxSelector', tblPrueba2.fnGetNodes()).prop('checked', false);
					selectboolean=false;
					}
				});
			}
			 
			 
		},
		
		{
            "sExtends": "ajax",
			'sButtonText': 'Share table',
            "fnClick": function () {
			var searchs =  $('#myInputTextField').val();//this.s.dt.oPreviousSearch.sSearch;
            var columns = this.s.dt.aoPreSearchCols;
            var columnsearch = "";
			var oParams = this.s.dt.oApi._fnAjaxParameters( this.s.dt );
			var numberofgenesrecord=this.s.dt._iRecordsTotal;
			var rowsk = $("#tblPrueba2").dataTable().fnGetNodes();
       // for(var i=0;i<rowsk.length;i++)
        //{
            // Get HTML of 3rd column (for example)
          //  console.log($(rowsk[i]));//.find("td:eq(3)").html()); 
        //}
		// console.log(this.s.dt.oApi);
		 	
			   for ( i=0 ; i<columns.length ; i++ ) {
				 
                columnsearch += "&filter_"+i+"="+encodeURIComponent(columns[i].sSearch);
              }
				 var finalvar= $.param(oParams)+"&iDisplayLength="+this.s.dt._iRecordsTotal+"&share_table=true&id="+$('#myInputTextField').val();
			   $('body').css("cursor", "wait");
			$.ajax({
					type: "POST",
  					url: "sites/all/themes/admire_grunge/requests/beta_search_augusts22.php",
 					data:(finalvar),
					success:function (data){
						$('body').css("cursor", "auto");
						var hm = $("body").wHumanMsg();
						 hm.wHumanMsg('Shared Link: <a target="_blank" href="'+"?table="+data.trim()+'">http://beta.congenie.org/?table='+data.trim()+'</a>', {theme: 'cream', opacity: 1,displayLength: 30000});
					}
			});
          }
        },
		//
		
	/*	{
            "sExtends": "ajax",
			'sButtonText': 'Test button',
			 "mColumns": "visible",
			 "bSelectedOnly": true,
            "fnClick": function () {
			var searchs =  $('#myInputTextField').val();//this.s.dt.oPreviousSearch.sSearch;
            var columns = this.s.dt.aoPreSearchCols;
            var columnsearch = "";
			var oParams = this.s.dt.oApi._fnAjaxParameters( this.s.dt );
			var numberofgenesrecord=this.s.dt._iRecordsTotal;
			   for ( i=0 ; i<columns.length ; i++ ) {
                columnsearch += "&filter_"+i+"="+encodeURIComponent(columns[i].sSearch);
              }
				 var finalvar= $.param(oParams)+"&iDisplayLength="+this.s.dt._iRecordsTotal+"&id="+$('#myInputTextField').val();
				 console.log(finalvar);
			   $('body').css("cursor", "wait");
			$.ajax({
					type: "POST",
  					url: "sites/all/themes/admire_grunge/requests/download.php",
 					data:(finalvar),
					success:function (data){
						console.log(data);
						$('body').css("cursor", "auto");
						//var hm = $("body").wHumanMsg();
						 //hm.wHumanMsg('Shared Link: <a target="_blank" href="'+"?table="+data.trim()+'">http://beta.congenie.org/?table='+data.trim()+'</a>', {theme: 'cream', opacity: 1,displayLength: 30000});
					}
			});
          }
        }
		{
		
		
		"sExtends": "downloadtest",
            "sButtonText": "Download test",
		    "sUrl": "sites/all/themes/admire_grunge/requests/download.php",
          //  "sExtraData":[], //for static var passing
          //  "fnInit":   function(node){formatTableToolsButton(node, 'ui-icon-document');}
			
		}
		
		*/  
      ]
    },
	
    'sDom': 'TC<\'clear\'>lfrtip',
	//"sDom": "Rlfrtip",
    'sScrollX': '100%',
//	'sScrollY': ($(window).height()-400),
  'fnInitComplete': function(oSettings, json) {
	//  console.log(screen.height)
      new FixedColumns( this, {
        'iLeftColumns': 0/*,
        'iRightColumns': 0*/
      } ); 
    },
	
	
	
    "fnDrawCallback": function() {
       // var $dataTable = dataTable();
        tblPrueba2.fnAdjustColumnSizing(false);

        // TableTools
        if (typeof(TableTools) != "undefined") {
            var tableTools = TableTools.fnGetInstance(tblPrueba2);
            if (tableTools != null && tableTools.fnResizeRequired()) {
                tableTools.fnResizeButtons();
            }
        }
        //
        var $dataTableWrapper = tblPrueba2.closest(".dataTables_wrapper");
        var panelHeight = $dataTableWrapper.parent().height();

        var toolbarHeights = 0;
        $dataTableWrapper.find(".fg-toolbar").each(function(i, obj) {
            toolbarHeights = toolbarHeights + $(obj).height();
        });

        var scrollHeadHeight = $dataTableWrapper.find(".dataTables_scrollHead").height();
        var height = panelHeight - toolbarHeights - scrollHeadHeight;
        $dataTableWrapper.find(".dataTables_scrollBody").height(height );

        tblPrueba2._fnScrollDraw();
    }
	
	
	
	
	//datatables end
	
  } );//new FixedColumns( tblPrueba2 );
  /* $(window).bind('resize', function () {
    tblPrueba2.fnAdjustColumnSizing();
  } );*/
  

  
  //$('#tblPrueba2').dataTable().fnAdjustColumnSizing();
   //$(window).resize(function () {
	 //   tblPrueba2.css('height', '200px');
     // tblPrueba2.fnAdjustColumnSizing();
    //});
    //$("div.clear").html('<button id="nextbt" style="width:200px;text-align:center;" class="ColVis_Button"><span>Save All to Gene List</span></button>');
 
 function ellipsis(text, n) {
    if(text.length>n)
        return text.substring(0,n)+"...";
    else
        return text;
}
 
$("#nextbt").toggle(
  function(){
     $("#section").hide(); 
	 
    // $("#nextbt").html("<span>Remove All from Gene List</span>");
  },
  function(){
      $("#section").show();
      $("#nextbt").html("<span>Save All to Gene List</span>");
  }); 


/***cache thing */
	
    var t = document.getElementsByTagName('textarea')[0];
    var offset= !window.opera ? (t.offsetHeight - t.clientHeight) : (t.offsetHeight + parseInt(window.getComputedStyle(t, null).getPropertyValue('border-top-width'))) ;
 
  t.style.height = 'auto';
        t.style.height = (t.scrollHeight  + offset ) + 'px';  
 
    var resize  = function(t) {
        t.style.height = 'auto';
        t.style.height = (t.scrollHeight  + offset ) + 'px';    
    }
 
    t.addEventListener && t.addEventListener('input', function(event) {
        resize(t);
    });
 
    t['attachEvent']  && t.attachEvent('onkeyup', function() {
        resize(t);
    });
 /** cache thing end */
 
  /*$("#selectAll").toggle(function (e) { <input type="button" id="nextbt" value="Select All">
  		$('.checkboxSelector', tblPrueba2.fnGetNodes()).prop('checked', true); 
		
		$('.checkboxSelectorall').prop('checked', true);
		
				//var aData = tblPrueba2.fnGetNodes();
	////	console.log(aData);
		$(tblPrueba2.fnGetNodes()).addClass('DTTT_selected');
		 e.stopPropagation();
		  return false;
		}
      // $("checkboxSelector", tblPrueba2.fnGetNodes()).attr("checked", true); }
     , function () { 
	 	$('.checkboxSelector' ,tblPrueba2.fnGetNodes()).prop('checked', false);
		$(tblPrueba2.fnGetNodes()).removeClass('DTTT_selected');
       //  $("checkboxSelector", tblPrueba2.fnGetNodes()).attr("checked", false); 
     });*/
  
  $(".checkboxSelectorall").change(function() {
		var aData = tblPrueba2.fnGetData();
		//var aData =tblPrueba2.fnGetNodes();
		//console.log(aData);
		 for(var j=0;j<aData.length;j++){
				 var iId = aData[j][0];
			   if ( jQuery.inArray(iId, gaiSelected) == -1 ){
					gaiSelected[gaiSelected.length++] = iId;
				}else{
					//gaiSelected = jQuery.grep(gaiSelected, function(value) {
					//console.log(gaiSelected);
					//return value != iId;
					//} );
				}
			 }
	  
	 if($(".checkboxSelectorall").prop('checked')==true){	
			addtothebasket(gaiSelected.join(","));
	   }else{
		  	removefrombasket(gaiSelected.join(","));
	   }
  	 tblPrueba2.$(".checkboxSelector").prop('checked', $(".checkboxSelectorall").prop('checked'));  
     });
		
	$("#tblPrueba2 tbody tr td input").live("change",function(event) {
	//	var aData = tblPrueba2.fnGetNodes();
	var temp_gene_selecct_id=( $(event.target).parent().parent().find("tr").prevObject[0].childNodes[1].textContent);
	//console.log(temp_gene_selecct_id);
		//console.log( $(event.target).find("tr").prevObject[0].parentNode.parentNode.childNodes[0]);
if($(event.target)[0].checked==true){
	addtothebasket(temp_gene_selecct_id);
		$(event.target).stop();
	 $(event.target).effect( "transfer",{ to: "#numberofgenesSpan", className: "ui-effects-transfer" }, 500 );
}else{
	removefrombasket(temp_gene_selecct_id);
	$("#numberofgenesSpan").stop();
	$("#numberofgenesSpan").effect( "transfer",{ to: $(event.target), className: "ui-effects-transfer-remove" }, 500 ); 
}
	 });		
		
/*	 if(tblPrueba2.$(".checkboxSelector").prop('checked') ==false){
		 console.log(temp_gene_selecct_id);
		 
		 	// $(event.target).parent().find("td").addClass('DTTT_selected');
			//$(".checkboxSelectorall").prop('checked',false); 
		 }else{
			 
		 }
*/
	 
	 
  /* Click event handler 
	$('#tblPrueba2 tbody tr').live('click', function () {
		var aData = tblPrueba2.fnGetData( this );
		
		var iId = aData[0];
		if ( jQuery.inArray(iId, gaiSelected) == -1 ){
			gaiSelected[gaiSelected.length++] = iId;
		}else{
			gaiSelected = jQuery.grep(gaiSelected, function(value) {
				return value != iId;
			} );
		}
		$(this).toggleClass('row_selected');
		//// chanaka $('#rcheckbox'+iId).prop('checked', true);
		
	} ); */
	
	
	
	
//Function ready end	
} );


	
	
TableTools.BUTTONS.downloadtest = {
	"sAction": "text",
	"sTag": "default",
	"sFieldBoundary": "",
	"sFieldSeperator": "\t",
	"sNewLine": "&lt;br&gt;",
	"sToolTip": "",
	"sButtonClass": "DTTT_button_text",
	"sButtonClassHover": "DTTT_button_text_hover",
	"sButtonText": "Download",
	"mColumns": "visible",
	"bHeader": true,
	"bFooter": true,
	"sDiv": "",
	"fnMouseover": null,
	"fnMouseout": null,
	"fnClick": function( nButton, oConfig ) {
	var ColumnsShown   = $('#tblPrueba2').getColumnsShown(tblPrueba2);
  	//console.log(ColumnsShown)

		var oParams = this.s.dt.oApi._fnAjaxParameters( this.s.dt );
		//console.log(columnsShown);
		 //var finalvar= $.param(oParams)+"&iDisplayLength="+this.s.dt._iRecordsTotal+"&share_table=true&id="+$('#myInputTextField').val();
		var ignitedPost = [
			{ "name": "id", "value": $('#myInputTextField').val()},
			{ "name": "iDisplayLength", "value": this.s.dt._iRecordsTotal},
			{ "name": "visColumns", "value": ColumnsShown },
			{ "name": "button_name", "value": oConfig.sButtonText }
			
		];
		//aoData.push(  );
		var aoGet = [];
		var aoPost = oParams.concat(ignitedPost);
	//console.log(aoPost);
	
		nIFrame = document.createElement('iframe');
		nIFrame.setAttribute( 'id', 'RemotingIFrame' );
		nIFrame.style.border='0px';
		nIFrame.style.width='0px';
		nIFrame.style.height='0px';
			
		document.body.appendChild( nIFrame );
		var nContentWindow = nIFrame.contentWindow;
		nContentWindow.document.open();
		nContentWindow.document.close();
		
		var nForm = nContentWindow.document.createElement( 'form' );
		nForm.setAttribute( 'method', 'post' );
	
		for ( var i=0 ; i<aoPost.length ; i++ )
		{
			nInput = nContentWindow.document.createElement( 'input' );
			nInput.setAttribute( 'name', aoPost[i].name );
			nInput.setAttribute( 'type', 'text' );
			nInput.value = aoPost[i].value;
			
			nForm.appendChild( nInput );
		}
		var sUrlAddition = '';
		for ( var i=0 ; i<aoGet.length ; i++ )
		{
			sUrlAddition += aoGet[i].name+'='+aoGet[i].value+'&amp;';
		}
		nForm.setAttribute( 'action', oConfig.sUrl );
		nContentWindow.document.body.appendChild( nForm );
		
		
		nForm.submit();
	},
	"fnSelect": null,
	"fnComplete": null,
	"fnInit": null
};







function updateGeneBasket(gaiSelected){
	$.each(gaiSelected, function(i, el){
    		if($.inArray(el, uniqueGenes) === -1) uniqueGenes.push(el);
	});
	//console.log(uniqueGenes.length);
}





function addtothebasket(addstr){
	//console.log(addstr);
			$.ajax({
  			type: "POST",
  			url: "crud/updatedatabase.php",
 			data:{ genes_send_add: addstr },
			success:function (){updategenebasket()}
			});
}

function removefrombasket(removestr){
	$.ajax({
  			type: "POST",
  			url: "crud/updatedatabase.php",
 			data:{ genes_send_remove : removestr },
			success:function (){updategenebasket()}
			});
}


function setCookie(c_name,value,exdays){
	var exdate=new Date();
	exdate.setDate(exdate.getDate() + exdays);
	var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
	document.cookie=c_name + "=" + c_value;
}

function getCookie(c_name){
	var c_value = document.cookie;
	var c_start = c_value.indexOf(" " + c_name + "=");
	if (c_start == -1){
	  c_start = c_value.indexOf(c_name + "=");
	  }
	if (c_start == -1) {
	  c_value = null;
	  }else{
	  c_start = c_value.indexOf("=", c_start) + 1;
	  var c_end = c_value.indexOf(";", c_start);
	  if (c_end == -1){
		c_end = c_value.length;
		}
		c_value = unescape(c_value.substring(c_start,c_end));
		}
	return c_value;
}



/* Time between each scrolling frame */
$.fn.dataTableExt.oPagination.iTweenTime = 100;

$.fn.dataTableExt.oPagination.scrolling = {
	"fnInit": function ( oSettings, nPaging, fnCallbackDraw )
	{
		/* Store the next and previous elements in the oSettings object as they can be very
		 * usful for automation - particularly testing
		 */
		var nPrevious = document.createElement( 'div' );
		var nNext = document.createElement( 'div' );
		
		if ( oSettings.sTableId !== '' )
		{
			nPaging.setAttribute( 'id', oSettings.sTableId+'_paginate' );
			nPrevious.setAttribute( 'id', oSettings.sTableId+'_previous' );
			nNext.setAttribute( 'id', oSettings.sTableId+'_next' );
		}
		
		nPrevious.className = "paginate_disabled_previous";
		nNext.className = "paginate_disabled_next";
		
		nPrevious.title = oSettings.oLanguage.oPaginate.sPrevious;
		nNext.title = oSettings.oLanguage.oPaginate.sNext;
		
		nPaging.appendChild( nPrevious );
		nPaging.appendChild( nNext );
		
		$(nPrevious).click( function() {
			/* Disallow paging event during a current paging event */
			if ( typeof oSettings.iPagingLoopStart != 'undefined' && oSettings.iPagingLoopStart != -1 )
			{
				return;
			}
			
			oSettings.iPagingLoopStart = oSettings._iDisplayStart;
			oSettings.iPagingEnd = oSettings._iDisplayStart - oSettings._iDisplayLength;
			
			/* Correct for underrun */
			if ( oSettings.iPagingEnd < 0 )
			{
			  oSettings.iPagingEnd = 0;
			}
			
			var iTween = $.fn.dataTableExt.oPagination.iTweenTime;
			var innerLoop = function () {
				if ( oSettings.iPagingLoopStart > oSettings.iPagingEnd ) {
					oSettings.iPagingLoopStart--;
					oSettings._iDisplayStart = oSettings.iPagingLoopStart;
					fnCallbackDraw( oSettings );
					setTimeout( function() { innerLoop(); }, iTween );
				} else {
					oSettings.iPagingLoopStart = -1;
				}
			};
			innerLoop();
		} );
		
		$(nNext).click( function() {
			/* Disallow paging event during a current paging event */
			if ( typeof oSettings.iPagingLoopStart != 'undefined' && oSettings.iPagingLoopStart != -1 )
			{
				return;
			}
			
			oSettings.iPagingLoopStart = oSettings._iDisplayStart;
			
			/* Make sure we are not over running the display array */
			if ( oSettings._iDisplayStart + oSettings._iDisplayLength < oSettings.fnRecordsDisplay() )
			{
				oSettings.iPagingEnd = oSettings._iDisplayStart + oSettings._iDisplayLength;
			}
			
			var iTween = $.fn.dataTableExt.oPagination.iTweenTime;
			var innerLoop = function () {
				if ( oSettings.iPagingLoopStart < oSettings.iPagingEnd ) {
					oSettings.iPagingLoopStart++;
					oSettings._iDisplayStart = oSettings.iPagingLoopStart;
					fnCallbackDraw( oSettings );
					setTimeout( function() { innerLoop(); }, iTween );
				} else {
					oSettings.iPagingLoopStart = -1;
				}
			};
			innerLoop();
		} );
		
		/* Take the brutal approach to cancelling text selection */
		$(nPrevious).bind( 'selectstart', function () { return false; } );
		$(nNext).bind( 'selectstart', function () { return false; } );
	},
	
	"fnUpdate": function ( oSettings, fnCallbackDraw )
	{
		if ( !oSettings.aanFeatures.p )
		{
			return;
		}
		
		/* Loop over each instance of the pager */
		var an = oSettings.aanFeatures.p;
		for ( var i=0, iLen=an.length ; i<iLen ; i++ )
		{
			if ( an[i].childNodes.length !== 0 )
			{
				an[i].childNodes[0].className = 
					( oSettings._iDisplayStart === 0 ) ? 
					oSettings.oClasses.sPagePrevDisabled : oSettings.oClasses.sPagePrevEnabled;
				
				an[i].childNodes[1].className = 
					( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) ? 
					oSettings.oClasses.sPageNextDisabled : oSettings.oClasses.sPageNextEnabled;
			}
		}
	}
}
